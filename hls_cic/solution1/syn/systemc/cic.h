// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _cic_HH_
#define _cic_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct cic : public sc_module {
    // Port declarations 10
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<16> > ENTRADA_V_TDATA;
    sc_in< sc_logic > ENTRADA_V_TVALID;
    sc_out< sc_logic > ENTRADA_V_TREADY;
    sc_out< sc_lv<46> > ap_return;


    // Module declarations
    cic(sc_module_name name);
    SC_HAS_PROCESS(cic);

    ~cic();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<16> > ENTRADA_V_0_data_out;
    sc_signal< sc_logic > ENTRADA_V_0_vld_in;
    sc_signal< sc_logic > ENTRADA_V_0_vld_out;
    sc_signal< sc_logic > ENTRADA_V_0_ack_in;
    sc_signal< sc_logic > ENTRADA_V_0_ack_out;
    sc_signal< sc_lv<16> > ENTRADA_V_0_payload_A;
    sc_signal< sc_lv<16> > ENTRADA_V_0_payload_B;
    sc_signal< sc_logic > ENTRADA_V_0_sel_rd;
    sc_signal< sc_logic > ENTRADA_V_0_sel_wr;
    sc_signal< sc_logic > ENTRADA_V_0_sel;
    sc_signal< sc_logic > ENTRADA_V_0_load_A;
    sc_signal< sc_logic > ENTRADA_V_0_load_B;
    sc_signal< sc_lv<2> > ENTRADA_V_0_state;
    sc_signal< sc_logic > ENTRADA_V_0_state_cmp_full;
    sc_signal< sc_lv<46> > inte_V_0;
    sc_signal< sc_lv<46> > inte_V_1;
    sc_signal< sc_lv<46> > inte_V_2;
    sc_signal< sc_lv<46> > inte_V_3;
    sc_signal< sc_lv<46> > inte_V_4;
    sc_signal< sc_lv<46> > deriv_V_0;
    sc_signal< sc_lv<46> > deriv_V_1;
    sc_signal< sc_lv<46> > deriv_V_2;
    sc_signal< sc_lv<46> > deriv_V_3;
    sc_signal< sc_lv<46> > deriv_V_4;
    sc_signal< sc_logic > ENTRADA_V_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > exitcond1_reg_270;
    sc_signal< sc_lv<46> > agg_result_V_reg_74;
    sc_signal< sc_lv<7> > di_reg_86;
    sc_signal< sc_lv<1> > exitcond1_fu_97_p2;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter2;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > exitcond1_reg_270_pp0_iter1_reg;
    sc_signal< sc_lv<7> > di_1_fu_103_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<46> > p_Val2_8_1_fu_133_p2;
    sc_signal< sc_lv<46> > p_Val2_8_1_reg_279;
    sc_signal< sc_lv<46> > p_Val2_8_4_fu_180_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_lv<46> > p_Val2_2_1_fu_218_p2;
    sc_signal< sc_lv<46> > p_Val2_2_1_reg_289;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_lv<46> > p_Val2_5_fu_117_p2;
    sc_signal< sc_lv<46> > p_Val2_8_2_fu_149_p2;
    sc_signal< sc_lv<46> > p_Val2_8_3_fu_164_p2;
    sc_signal< sc_lv<46> > p_Val2_2_fu_202_p2;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<46> > p_Val2_2_2_fu_233_p2;
    sc_signal< sc_lv<46> > p_Val2_2_3_fu_248_p2;
    sc_signal< sc_lv<46> > tmp_8_fu_113_p1;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_pp0_stage0;
    static const sc_lv<4> ap_ST_fsm_state5;
    static const sc_lv<4> ap_ST_fsm_state6;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<7> ap_const_lv7_40;
    static const sc_lv<7> ap_const_lv7_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ENTRADA_V_0_ack_in();
    void thread_ENTRADA_V_0_ack_out();
    void thread_ENTRADA_V_0_data_out();
    void thread_ENTRADA_V_0_load_A();
    void thread_ENTRADA_V_0_load_B();
    void thread_ENTRADA_V_0_sel();
    void thread_ENTRADA_V_0_state_cmp_full();
    void thread_ENTRADA_V_0_vld_in();
    void thread_ENTRADA_V_0_vld_out();
    void thread_ENTRADA_V_TDATA_blk_n();
    void thread_ENTRADA_V_TREADY();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_block_state4_pp0_stage0_iter2();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_ap_rst_n_inv();
    void thread_di_1_fu_103_p2();
    void thread_exitcond1_fu_97_p2();
    void thread_p_Val2_2_1_fu_218_p2();
    void thread_p_Val2_2_2_fu_233_p2();
    void thread_p_Val2_2_3_fu_248_p2();
    void thread_p_Val2_2_fu_202_p2();
    void thread_p_Val2_5_fu_117_p2();
    void thread_p_Val2_8_1_fu_133_p2();
    void thread_p_Val2_8_2_fu_149_p2();
    void thread_p_Val2_8_3_fu_164_p2();
    void thread_p_Val2_8_4_fu_180_p2();
    void thread_tmp_8_fu_113_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
