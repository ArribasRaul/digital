// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "cic.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic cic::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic cic::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> cic::ap_ST_fsm_state1 = "1";
const sc_lv<4> cic::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<4> cic::ap_ST_fsm_state5 = "100";
const sc_lv<4> cic::ap_ST_fsm_state6 = "1000";
const sc_lv<32> cic::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool cic::ap_const_boolean_1 = true;
const sc_lv<1> cic::ap_const_lv1_0 = "0";
const sc_lv<1> cic::ap_const_lv1_1 = "1";
const sc_lv<2> cic::ap_const_lv2_0 = "00";
const sc_lv<2> cic::ap_const_lv2_2 = "10";
const sc_lv<2> cic::ap_const_lv2_3 = "11";
const sc_lv<2> cic::ap_const_lv2_1 = "1";
const sc_lv<32> cic::ap_const_lv32_1 = "1";
const bool cic::ap_const_boolean_0 = false;
const sc_lv<32> cic::ap_const_lv32_2 = "10";
const sc_lv<7> cic::ap_const_lv7_0 = "0000000";
const sc_lv<32> cic::ap_const_lv32_3 = "11";
const sc_lv<7> cic::ap_const_lv7_40 = "1000000";
const sc_lv<7> cic::ap_const_lv7_1 = "1";

cic::cic(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ENTRADA_V_0_ack_in);
    sensitive << ( ENTRADA_V_0_state );

    SC_METHOD(thread_ENTRADA_V_0_ack_out);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond1_reg_270 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ENTRADA_V_0_data_out);
    sensitive << ( ENTRADA_V_0_payload_A );
    sensitive << ( ENTRADA_V_0_payload_B );
    sensitive << ( ENTRADA_V_0_sel );

    SC_METHOD(thread_ENTRADA_V_0_load_A);
    sensitive << ( ENTRADA_V_0_sel_wr );
    sensitive << ( ENTRADA_V_0_state_cmp_full );

    SC_METHOD(thread_ENTRADA_V_0_load_B);
    sensitive << ( ENTRADA_V_0_sel_wr );
    sensitive << ( ENTRADA_V_0_state_cmp_full );

    SC_METHOD(thread_ENTRADA_V_0_sel);
    sensitive << ( ENTRADA_V_0_sel_rd );

    SC_METHOD(thread_ENTRADA_V_0_state_cmp_full);
    sensitive << ( ENTRADA_V_0_state );

    SC_METHOD(thread_ENTRADA_V_0_vld_in);
    sensitive << ( ENTRADA_V_TVALID );

    SC_METHOD(thread_ENTRADA_V_0_vld_out);
    sensitive << ( ENTRADA_V_0_state );

    SC_METHOD(thread_ENTRADA_V_TDATA_blk_n);
    sensitive << ( ENTRADA_V_0_state );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond1_reg_270 );

    SC_METHOD(thread_ENTRADA_V_TREADY);
    sensitive << ( ENTRADA_V_0_state );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( ENTRADA_V_0_vld_out );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond1_reg_270 );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( ENTRADA_V_0_vld_out );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond1_reg_270 );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter1);
    sensitive << ( ENTRADA_V_0_vld_out );
    sensitive << ( exitcond1_reg_270 );

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter2);

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state2);
    sensitive << ( exitcond1_fu_97_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_ap_return);
    sensitive << ( deriv_V_4 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( p_Val2_2_3_fu_248_p2 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_di_1_fu_103_p2);
    sensitive << ( di_reg_86 );

    SC_METHOD(thread_exitcond1_fu_97_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( di_reg_86 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_p_Val2_2_1_fu_218_p2);
    sensitive << ( deriv_V_1 );
    sensitive << ( p_Val2_2_fu_202_p2 );

    SC_METHOD(thread_p_Val2_2_2_fu_233_p2);
    sensitive << ( deriv_V_2 );
    sensitive << ( p_Val2_2_1_reg_289 );

    SC_METHOD(thread_p_Val2_2_3_fu_248_p2);
    sensitive << ( deriv_V_3 );
    sensitive << ( p_Val2_2_2_fu_233_p2 );

    SC_METHOD(thread_p_Val2_2_fu_202_p2);
    sensitive << ( deriv_V_0 );
    sensitive << ( agg_result_V_reg_74 );

    SC_METHOD(thread_p_Val2_5_fu_117_p2);
    sensitive << ( inte_V_0 );
    sensitive << ( tmp_8_fu_113_p1 );

    SC_METHOD(thread_p_Val2_8_1_fu_133_p2);
    sensitive << ( inte_V_1 );
    sensitive << ( p_Val2_5_fu_117_p2 );

    SC_METHOD(thread_p_Val2_8_2_fu_149_p2);
    sensitive << ( inte_V_2 );
    sensitive << ( p_Val2_8_1_reg_279 );

    SC_METHOD(thread_p_Val2_8_3_fu_164_p2);
    sensitive << ( inte_V_3 );
    sensitive << ( p_Val2_8_2_fu_149_p2 );

    SC_METHOD(thread_p_Val2_8_4_fu_180_p2);
    sensitive << ( inte_V_4 );
    sensitive << ( p_Val2_8_3_fu_164_p2 );

    SC_METHOD(thread_tmp_8_fu_113_p1);
    sensitive << ( ENTRADA_V_0_data_out );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond1_fu_97_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0_subdone );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "0001";
    ENTRADA_V_0_sel_rd = SC_LOGIC_0;
    ENTRADA_V_0_sel_wr = SC_LOGIC_0;
    ENTRADA_V_0_state = "00";
    inte_V_0 = "0000000000000000000000000000000000000000000000";
    inte_V_1 = "0000000000000000000000000000000000000000000000";
    inte_V_2 = "0000000000000000000000000000000000000000000000";
    inte_V_3 = "0000000000000000000000000000000000000000000000";
    inte_V_4 = "0000000000000000000000000000000000000000000000";
    deriv_V_0 = "0000000000000000000000000000000000000000000000";
    deriv_V_1 = "0000000000000000000000000000000000000000000000";
    deriv_V_2 = "0000000000000000000000000000000000000000000000";
    deriv_V_3 = "0000000000000000000000000000000000000000000000";
    deriv_V_4 = "0000000000000000000000000000000000000000000000";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "cic_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, ENTRADA_V_TDATA, "(port)ENTRADA_V_TDATA");
    sc_trace(mVcdFile, ENTRADA_V_TVALID, "(port)ENTRADA_V_TVALID");
    sc_trace(mVcdFile, ENTRADA_V_TREADY, "(port)ENTRADA_V_TREADY");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ENTRADA_V_0_data_out, "ENTRADA_V_0_data_out");
    sc_trace(mVcdFile, ENTRADA_V_0_vld_in, "ENTRADA_V_0_vld_in");
    sc_trace(mVcdFile, ENTRADA_V_0_vld_out, "ENTRADA_V_0_vld_out");
    sc_trace(mVcdFile, ENTRADA_V_0_ack_in, "ENTRADA_V_0_ack_in");
    sc_trace(mVcdFile, ENTRADA_V_0_ack_out, "ENTRADA_V_0_ack_out");
    sc_trace(mVcdFile, ENTRADA_V_0_payload_A, "ENTRADA_V_0_payload_A");
    sc_trace(mVcdFile, ENTRADA_V_0_payload_B, "ENTRADA_V_0_payload_B");
    sc_trace(mVcdFile, ENTRADA_V_0_sel_rd, "ENTRADA_V_0_sel_rd");
    sc_trace(mVcdFile, ENTRADA_V_0_sel_wr, "ENTRADA_V_0_sel_wr");
    sc_trace(mVcdFile, ENTRADA_V_0_sel, "ENTRADA_V_0_sel");
    sc_trace(mVcdFile, ENTRADA_V_0_load_A, "ENTRADA_V_0_load_A");
    sc_trace(mVcdFile, ENTRADA_V_0_load_B, "ENTRADA_V_0_load_B");
    sc_trace(mVcdFile, ENTRADA_V_0_state, "ENTRADA_V_0_state");
    sc_trace(mVcdFile, ENTRADA_V_0_state_cmp_full, "ENTRADA_V_0_state_cmp_full");
    sc_trace(mVcdFile, inte_V_0, "inte_V_0");
    sc_trace(mVcdFile, inte_V_1, "inte_V_1");
    sc_trace(mVcdFile, inte_V_2, "inte_V_2");
    sc_trace(mVcdFile, inte_V_3, "inte_V_3");
    sc_trace(mVcdFile, inte_V_4, "inte_V_4");
    sc_trace(mVcdFile, deriv_V_0, "deriv_V_0");
    sc_trace(mVcdFile, deriv_V_1, "deriv_V_1");
    sc_trace(mVcdFile, deriv_V_2, "deriv_V_2");
    sc_trace(mVcdFile, deriv_V_3, "deriv_V_3");
    sc_trace(mVcdFile, deriv_V_4, "deriv_V_4");
    sc_trace(mVcdFile, ENTRADA_V_TDATA_blk_n, "ENTRADA_V_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, exitcond1_reg_270, "exitcond1_reg_270");
    sc_trace(mVcdFile, agg_result_V_reg_74, "agg_result_V_reg_74");
    sc_trace(mVcdFile, di_reg_86, "di_reg_86");
    sc_trace(mVcdFile, exitcond1_fu_97_p2, "exitcond1_fu_97_p2");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter1, "ap_block_state3_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter2, "ap_block_state4_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, exitcond1_reg_270_pp0_iter1_reg, "exitcond1_reg_270_pp0_iter1_reg");
    sc_trace(mVcdFile, di_1_fu_103_p2, "di_1_fu_103_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, p_Val2_8_1_fu_133_p2, "p_Val2_8_1_fu_133_p2");
    sc_trace(mVcdFile, p_Val2_8_1_reg_279, "p_Val2_8_1_reg_279");
    sc_trace(mVcdFile, p_Val2_8_4_fu_180_p2, "p_Val2_8_4_fu_180_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, p_Val2_2_1_fu_218_p2, "p_Val2_2_1_fu_218_p2");
    sc_trace(mVcdFile, p_Val2_2_1_reg_289, "p_Val2_2_1_reg_289");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state2, "ap_condition_pp0_exit_iter0_state2");
    sc_trace(mVcdFile, p_Val2_5_fu_117_p2, "p_Val2_5_fu_117_p2");
    sc_trace(mVcdFile, p_Val2_8_2_fu_149_p2, "p_Val2_8_2_fu_149_p2");
    sc_trace(mVcdFile, p_Val2_8_3_fu_164_p2, "p_Val2_8_3_fu_164_p2");
    sc_trace(mVcdFile, p_Val2_2_fu_202_p2, "p_Val2_2_fu_202_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, p_Val2_2_2_fu_233_p2, "p_Val2_2_2_fu_233_p2");
    sc_trace(mVcdFile, p_Val2_2_3_fu_248_p2, "p_Val2_2_3_fu_248_p2");
    sc_trace(mVcdFile, tmp_8_fu_113_p1, "tmp_8_fu_113_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
    mHdltvinHandle.open("cic.hdltvin.dat");
    mHdltvoutHandle.open("cic.hdltvout.dat");
}

cic::~cic() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void cic::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ENTRADA_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ENTRADA_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ENTRADA_V_0_vld_out.read()))) {
            ENTRADA_V_0_sel_rd =  (sc_logic) (~ENTRADA_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ENTRADA_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ENTRADA_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ENTRADA_V_0_ack_in.read()))) {
            ENTRADA_V_0_sel_wr =  (sc_logic) (~ENTRADA_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ENTRADA_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, ENTRADA_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ENTRADA_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ENTRADA_V_0_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, ENTRADA_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ENTRADA_V_0_state.read(), ap_const_lv2_2)))) {
            ENTRADA_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ENTRADA_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, ENTRADA_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ENTRADA_V_0_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, ENTRADA_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ENTRADA_V_0_state.read(), ap_const_lv2_1)))) {
            ENTRADA_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ENTRADA_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ENTRADA_V_0_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ENTRADA_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ENTRADA_V_0_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(ENTRADA_V_0_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, ENTRADA_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ENTRADA_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, ENTRADA_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ENTRADA_V_0_ack_out.read()))))) {
            ENTRADA_V_0_state = ap_const_lv2_3;
        } else {
            ENTRADA_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read())) {
                ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state2.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter2 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_97_p2.read()))) {
        di_reg_86 = di_1_fu_103_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        di_reg_86 = ap_const_lv7_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ENTRADA_V_0_load_A.read())) {
        ENTRADA_V_0_payload_A = ENTRADA_V_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ENTRADA_V_0_load_B.read())) {
        ENTRADA_V_0_payload_B = ENTRADA_V_TDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter2.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_270_pp0_iter1_reg.read()))) {
        agg_result_V_reg_74 = p_Val2_8_4_fu_180_p2.read();
        inte_V_2 = p_Val2_8_2_fu_149_p2.read();
        inte_V_3 = p_Val2_8_3_fu_164_p2.read();
        inte_V_4 = p_Val2_8_4_fu_180_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        deriv_V_0 = agg_result_V_reg_74.read();
        deriv_V_1 = p_Val2_2_fu_202_p2.read();
        p_Val2_2_1_reg_289 = p_Val2_2_1_fu_218_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        deriv_V_2 = p_Val2_2_1_reg_289.read();
        deriv_V_3 = p_Val2_2_2_fu_233_p2.read();
        deriv_V_4 = p_Val2_2_3_fu_248_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        exitcond1_reg_270 = exitcond1_fu_97_p2.read();
        exitcond1_reg_270_pp0_iter1_reg = exitcond1_reg_270.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_270.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        inte_V_0 = p_Val2_5_fu_117_p2.read();
        inte_V_1 = p_Val2_8_1_fu_133_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_270.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        p_Val2_8_1_reg_279 = p_Val2_8_1_fu_133_p2.read();
    }
}

void cic::thread_ENTRADA_V_0_ack_in() {
    ENTRADA_V_0_ack_in = ENTRADA_V_0_state.read()[1];
}

void cic::thread_ENTRADA_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_270.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        ENTRADA_V_0_ack_out = ap_const_logic_1;
    } else {
        ENTRADA_V_0_ack_out = ap_const_logic_0;
    }
}

void cic::thread_ENTRADA_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ENTRADA_V_0_sel.read())) {
        ENTRADA_V_0_data_out = ENTRADA_V_0_payload_B.read();
    } else {
        ENTRADA_V_0_data_out = ENTRADA_V_0_payload_A.read();
    }
}

void cic::thread_ENTRADA_V_0_load_A() {
    ENTRADA_V_0_load_A = (ENTRADA_V_0_state_cmp_full.read() & ~ENTRADA_V_0_sel_wr.read());
}

void cic::thread_ENTRADA_V_0_load_B() {
    ENTRADA_V_0_load_B = (ENTRADA_V_0_sel_wr.read() & ENTRADA_V_0_state_cmp_full.read());
}

void cic::thread_ENTRADA_V_0_sel() {
    ENTRADA_V_0_sel = ENTRADA_V_0_sel_rd.read();
}

void cic::thread_ENTRADA_V_0_state_cmp_full() {
    ENTRADA_V_0_state_cmp_full =  (sc_logic) ((!ENTRADA_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(ENTRADA_V_0_state.read() != ap_const_lv2_1))[0];
}

void cic::thread_ENTRADA_V_0_vld_in() {
    ENTRADA_V_0_vld_in = ENTRADA_V_TVALID.read();
}

void cic::thread_ENTRADA_V_0_vld_out() {
    ENTRADA_V_0_vld_out = ENTRADA_V_0_state.read()[0];
}

void cic::thread_ENTRADA_V_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_270.read()))) {
        ENTRADA_V_TDATA_blk_n = ENTRADA_V_0_state.read()[0];
    } else {
        ENTRADA_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void cic::thread_ENTRADA_V_TREADY() {
    ENTRADA_V_TREADY = ENTRADA_V_0_state.read()[1];
}

void cic::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void cic::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void cic::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[2];
}

void cic::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[3];
}

void cic::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void cic::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_270.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ENTRADA_V_0_vld_out.read()));
}

void cic::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_270.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ENTRADA_V_0_vld_out.read()));
}

void cic::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void cic::thread_ap_block_state3_pp0_stage0_iter1() {
    ap_block_state3_pp0_stage0_iter1 = (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_270.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ENTRADA_V_0_vld_out.read()));
}

void cic::thread_ap_block_state4_pp0_stage0_iter2() {
    ap_block_state4_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void cic::thread_ap_condition_pp0_exit_iter0_state2() {
    if (esl_seteq<1,1,1>(exitcond1_fu_97_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_0;
    }
}

void cic::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void cic::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void cic::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void cic::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void cic::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void cic::thread_ap_return() {
    ap_return = (!p_Val2_2_3_fu_248_p2.read().is_01() || !deriv_V_4.read().is_01())? sc_lv<46>(): (sc_biguint<46>(p_Val2_2_3_fu_248_p2.read()) - sc_biguint<46>(deriv_V_4.read()));
}

void cic::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void cic::thread_di_1_fu_103_p2() {
    di_1_fu_103_p2 = (!di_reg_86.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(di_reg_86.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void cic::thread_exitcond1_fu_97_p2() {
    exitcond1_fu_97_p2 = (!di_reg_86.read().is_01() || !ap_const_lv7_40.is_01())? sc_lv<1>(): sc_lv<1>(di_reg_86.read() == ap_const_lv7_40);
}

void cic::thread_p_Val2_2_1_fu_218_p2() {
    p_Val2_2_1_fu_218_p2 = (!p_Val2_2_fu_202_p2.read().is_01() || !deriv_V_1.read().is_01())? sc_lv<46>(): (sc_biguint<46>(p_Val2_2_fu_202_p2.read()) - sc_biguint<46>(deriv_V_1.read()));
}

void cic::thread_p_Val2_2_2_fu_233_p2() {
    p_Val2_2_2_fu_233_p2 = (!p_Val2_2_1_reg_289.read().is_01() || !deriv_V_2.read().is_01())? sc_lv<46>(): (sc_biguint<46>(p_Val2_2_1_reg_289.read()) - sc_biguint<46>(deriv_V_2.read()));
}

void cic::thread_p_Val2_2_3_fu_248_p2() {
    p_Val2_2_3_fu_248_p2 = (!p_Val2_2_2_fu_233_p2.read().is_01() || !deriv_V_3.read().is_01())? sc_lv<46>(): (sc_biguint<46>(p_Val2_2_2_fu_233_p2.read()) - sc_biguint<46>(deriv_V_3.read()));
}

void cic::thread_p_Val2_2_fu_202_p2() {
    p_Val2_2_fu_202_p2 = (!agg_result_V_reg_74.read().is_01() || !deriv_V_0.read().is_01())? sc_lv<46>(): (sc_biguint<46>(agg_result_V_reg_74.read()) - sc_biguint<46>(deriv_V_0.read()));
}

void cic::thread_p_Val2_5_fu_117_p2() {
    p_Val2_5_fu_117_p2 = (!inte_V_0.read().is_01() || !tmp_8_fu_113_p1.read().is_01())? sc_lv<46>(): (sc_biguint<46>(inte_V_0.read()) + sc_bigint<46>(tmp_8_fu_113_p1.read()));
}

void cic::thread_p_Val2_8_1_fu_133_p2() {
    p_Val2_8_1_fu_133_p2 = (!inte_V_1.read().is_01() || !p_Val2_5_fu_117_p2.read().is_01())? sc_lv<46>(): (sc_biguint<46>(inte_V_1.read()) + sc_biguint<46>(p_Val2_5_fu_117_p2.read()));
}

void cic::thread_p_Val2_8_2_fu_149_p2() {
    p_Val2_8_2_fu_149_p2 = (!inte_V_2.read().is_01() || !p_Val2_8_1_reg_279.read().is_01())? sc_lv<46>(): (sc_biguint<46>(inte_V_2.read()) + sc_biguint<46>(p_Val2_8_1_reg_279.read()));
}

void cic::thread_p_Val2_8_3_fu_164_p2() {
    p_Val2_8_3_fu_164_p2 = (!inte_V_3.read().is_01() || !p_Val2_8_2_fu_149_p2.read().is_01())? sc_lv<46>(): (sc_biguint<46>(inte_V_3.read()) + sc_biguint<46>(p_Val2_8_2_fu_149_p2.read()));
}

void cic::thread_p_Val2_8_4_fu_180_p2() {
    p_Val2_8_4_fu_180_p2 = (!inte_V_4.read().is_01() || !p_Val2_8_3_fu_164_p2.read().is_01())? sc_lv<46>(): (sc_biguint<46>(inte_V_4.read()) + sc_biguint<46>(p_Val2_8_3_fu_164_p2.read()));
}

void cic::thread_tmp_8_fu_113_p1() {
    tmp_8_fu_113_p1 = esl_sext<46,16>(ENTRADA_V_0_data_out.read());
}

void cic::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((!(esl_seteq<1,1,1>(exitcond1_fu_97_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) && !(esl_seteq<1,1,1>(ap_enable_reg_pp0_iter2.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if (((esl_seteq<1,1,1>(ap_enable_reg_pp0_iter2.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(exitcond1_fu_97_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXXX";
            break;
    }
}

void cic::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ENTRADA_V_TDATA\" :  \"" << ENTRADA_V_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ENTRADA_V_TVALID\" :  \"" << ENTRADA_V_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ENTRADA_V_TREADY\" :  \"" << ENTRADA_V_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_return\" :  \"" << ap_return.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

