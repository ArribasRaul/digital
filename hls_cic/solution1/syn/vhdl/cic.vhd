-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cic is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ENTRADA_V_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    ENTRADA_V_TVALID : IN STD_LOGIC;
    ENTRADA_V_TREADY : OUT STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (45 downto 0) );
end;


architecture behav of cic is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "cic,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7a200tfbg676-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.642800,HLS_SYN_LAT=68,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=650,HLS_SYN_LUT=663,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ENTRADA_V_0_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal ENTRADA_V_0_vld_in : STD_LOGIC;
    signal ENTRADA_V_0_vld_out : STD_LOGIC;
    signal ENTRADA_V_0_ack_in : STD_LOGIC;
    signal ENTRADA_V_0_ack_out : STD_LOGIC;
    signal ENTRADA_V_0_payload_A : STD_LOGIC_VECTOR (15 downto 0);
    signal ENTRADA_V_0_payload_B : STD_LOGIC_VECTOR (15 downto 0);
    signal ENTRADA_V_0_sel_rd : STD_LOGIC := '0';
    signal ENTRADA_V_0_sel_wr : STD_LOGIC := '0';
    signal ENTRADA_V_0_sel : STD_LOGIC;
    signal ENTRADA_V_0_load_A : STD_LOGIC;
    signal ENTRADA_V_0_load_B : STD_LOGIC;
    signal ENTRADA_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ENTRADA_V_0_state_cmp_full : STD_LOGIC;
    signal inte_V_0 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000000000";
    signal inte_V_1 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000000000";
    signal inte_V_2 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000000000";
    signal inte_V_3 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000000000";
    signal inte_V_4 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000000000";
    signal deriv_V_0 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000000000";
    signal deriv_V_1 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000000000";
    signal deriv_V_2 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000000000";
    signal deriv_V_3 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000000000";
    signal deriv_V_4 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000000000";
    signal ENTRADA_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond1_reg_270 : STD_LOGIC_VECTOR (0 downto 0);
    signal agg_result_V_reg_74 : STD_LOGIC_VECTOR (45 downto 0);
    signal di_reg_86 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond1_fu_97_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exitcond1_reg_270_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal di_1_fu_103_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal p_Val2_8_1_fu_133_p2 : STD_LOGIC_VECTOR (45 downto 0);
    signal p_Val2_8_1_reg_279 : STD_LOGIC_VECTOR (45 downto 0);
    signal p_Val2_8_4_fu_180_p2 : STD_LOGIC_VECTOR (45 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal p_Val2_2_1_fu_218_p2 : STD_LOGIC_VECTOR (45 downto 0);
    signal p_Val2_2_1_reg_289 : STD_LOGIC_VECTOR (45 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal p_Val2_5_fu_117_p2 : STD_LOGIC_VECTOR (45 downto 0);
    signal p_Val2_8_2_fu_149_p2 : STD_LOGIC_VECTOR (45 downto 0);
    signal p_Val2_8_3_fu_164_p2 : STD_LOGIC_VECTOR (45 downto 0);
    signal p_Val2_2_fu_202_p2 : STD_LOGIC_VECTOR (45 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal p_Val2_2_2_fu_233_p2 : STD_LOGIC_VECTOR (45 downto 0);
    signal p_Val2_2_3_fu_248_p2 : STD_LOGIC_VECTOR (45 downto 0);
    signal tmp_8_fu_113_p1 : STD_LOGIC_VECTOR (45 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ENTRADA_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ENTRADA_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ENTRADA_V_0_ack_out) and (ap_const_logic_1 = ENTRADA_V_0_vld_out))) then 
                                        ENTRADA_V_0_sel_rd <= not(ENTRADA_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    ENTRADA_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ENTRADA_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ENTRADA_V_0_ack_in) and (ap_const_logic_1 = ENTRADA_V_0_vld_in))) then 
                                        ENTRADA_V_0_sel_wr <= not(ENTRADA_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    ENTRADA_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ENTRADA_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = ENTRADA_V_0_state) and (ap_const_logic_0 = ENTRADA_V_0_vld_in)) or ((ap_const_lv2_3 = ENTRADA_V_0_state) and (ap_const_logic_0 = ENTRADA_V_0_vld_in) and (ap_const_logic_1 = ENTRADA_V_0_ack_out)))) then 
                    ENTRADA_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = ENTRADA_V_0_state) and (ap_const_logic_0 = ENTRADA_V_0_ack_out)) or ((ap_const_lv2_3 = ENTRADA_V_0_state) and (ap_const_logic_0 = ENTRADA_V_0_ack_out) and (ap_const_logic_1 = ENTRADA_V_0_vld_in)))) then 
                    ENTRADA_V_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = ENTRADA_V_0_vld_in) and (ap_const_logic_1 = ENTRADA_V_0_ack_out))) and not(((ap_const_logic_0 = ENTRADA_V_0_ack_out) and (ap_const_logic_1 = ENTRADA_V_0_vld_in))) and (ap_const_lv2_3 = ENTRADA_V_0_state)) or ((ap_const_lv2_1 = ENTRADA_V_0_state) and (ap_const_logic_1 = ENTRADA_V_0_ack_out)) or ((ap_const_lv2_2 = ENTRADA_V_0_state) and (ap_const_logic_1 = ENTRADA_V_0_vld_in)))) then 
                    ENTRADA_V_0_state <= ap_const_lv2_3;
                else 
                    ENTRADA_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    di_reg_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_97_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                di_reg_86 <= di_1_fu_103_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                di_reg_86 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ENTRADA_V_0_load_A)) then
                ENTRADA_V_0_payload_A <= ENTRADA_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ENTRADA_V_0_load_B)) then
                ENTRADA_V_0_payload_B <= ENTRADA_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_270_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                agg_result_V_reg_74 <= p_Val2_8_4_fu_180_p2;
                inte_V_2 <= p_Val2_8_2_fu_149_p2;
                inte_V_3 <= p_Val2_8_3_fu_164_p2;
                inte_V_4 <= p_Val2_8_4_fu_180_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                deriv_V_0 <= agg_result_V_reg_74;
                deriv_V_1 <= p_Val2_2_fu_202_p2;
                p_Val2_2_1_reg_289 <= p_Val2_2_1_fu_218_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                deriv_V_2 <= p_Val2_2_1_reg_289;
                deriv_V_3 <= p_Val2_2_2_fu_233_p2;
                deriv_V_4 <= p_Val2_2_3_fu_248_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond1_reg_270 <= exitcond1_fu_97_p2;
                exitcond1_reg_270_pp0_iter1_reg <= exitcond1_reg_270;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_270 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                inte_V_0 <= p_Val2_5_fu_117_p2;
                inte_V_1 <= p_Val2_8_1_fu_133_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_270 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                p_Val2_8_1_reg_279 <= p_Val2_8_1_fu_133_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, exitcond1_fu_97_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((exitcond1_fu_97_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((exitcond1_fu_97_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ENTRADA_V_0_ack_in <= ENTRADA_V_0_state(1);

    ENTRADA_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond1_reg_270, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond1_reg_270 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            ENTRADA_V_0_ack_out <= ap_const_logic_1;
        else 
            ENTRADA_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    ENTRADA_V_0_data_out_assign_proc : process(ENTRADA_V_0_payload_A, ENTRADA_V_0_payload_B, ENTRADA_V_0_sel)
    begin
        if ((ap_const_logic_1 = ENTRADA_V_0_sel)) then 
            ENTRADA_V_0_data_out <= ENTRADA_V_0_payload_B;
        else 
            ENTRADA_V_0_data_out <= ENTRADA_V_0_payload_A;
        end if; 
    end process;

    ENTRADA_V_0_load_A <= (not(ENTRADA_V_0_sel_wr) and ENTRADA_V_0_state_cmp_full);
    ENTRADA_V_0_load_B <= (ENTRADA_V_0_state_cmp_full and ENTRADA_V_0_sel_wr);
    ENTRADA_V_0_sel <= ENTRADA_V_0_sel_rd;
    ENTRADA_V_0_state_cmp_full <= '0' when (ENTRADA_V_0_state = ap_const_lv2_1) else '1';
    ENTRADA_V_0_vld_in <= ENTRADA_V_TVALID;
    ENTRADA_V_0_vld_out <= ENTRADA_V_0_state(0);

    ENTRADA_V_TDATA_blk_n_assign_proc : process(ENTRADA_V_0_state, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond1_reg_270)
    begin
        if (((exitcond1_reg_270 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ENTRADA_V_TDATA_blk_n <= ENTRADA_V_0_state(0);
        else 
            ENTRADA_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ENTRADA_V_TREADY <= ENTRADA_V_0_state(1);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state5 <= ap_CS_fsm(2);
    ap_CS_fsm_state6 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ENTRADA_V_0_vld_out, ap_enable_reg_pp0_iter1, exitcond1_reg_270)
    begin
                ap_block_pp0_stage0_11001 <= ((exitcond1_reg_270 = ap_const_lv1_0) and (ap_const_logic_0 = ENTRADA_V_0_vld_out) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ENTRADA_V_0_vld_out, ap_enable_reg_pp0_iter1, exitcond1_reg_270)
    begin
                ap_block_pp0_stage0_subdone <= ((exitcond1_reg_270 = ap_const_lv1_0) and (ap_const_logic_0 = ENTRADA_V_0_vld_out) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(ENTRADA_V_0_vld_out, exitcond1_reg_270)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((exitcond1_reg_270 = ap_const_lv1_0) and (ap_const_logic_0 = ENTRADA_V_0_vld_out));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond1_fu_97_p2)
    begin
        if ((exitcond1_fu_97_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= std_logic_vector(unsigned(p_Val2_2_3_fu_248_p2) - unsigned(deriv_V_4));

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    di_1_fu_103_p2 <= std_logic_vector(unsigned(di_reg_86) + unsigned(ap_const_lv7_1));
    exitcond1_fu_97_p2 <= "1" when (di_reg_86 = ap_const_lv7_40) else "0";
    p_Val2_2_1_fu_218_p2 <= std_logic_vector(unsigned(p_Val2_2_fu_202_p2) - unsigned(deriv_V_1));
    p_Val2_2_2_fu_233_p2 <= std_logic_vector(unsigned(p_Val2_2_1_reg_289) - unsigned(deriv_V_2));
    p_Val2_2_3_fu_248_p2 <= std_logic_vector(unsigned(p_Val2_2_2_fu_233_p2) - unsigned(deriv_V_3));
    p_Val2_2_fu_202_p2 <= std_logic_vector(unsigned(agg_result_V_reg_74) - unsigned(deriv_V_0));
    p_Val2_5_fu_117_p2 <= std_logic_vector(unsigned(inte_V_0) + unsigned(tmp_8_fu_113_p1));
    p_Val2_8_1_fu_133_p2 <= std_logic_vector(unsigned(inte_V_1) + unsigned(p_Val2_5_fu_117_p2));
    p_Val2_8_2_fu_149_p2 <= std_logic_vector(unsigned(inte_V_2) + unsigned(p_Val2_8_1_reg_279));
    p_Val2_8_3_fu_164_p2 <= std_logic_vector(unsigned(inte_V_3) + unsigned(p_Val2_8_2_fu_149_p2));
    p_Val2_8_4_fu_180_p2 <= std_logic_vector(unsigned(inte_V_4) + unsigned(p_Val2_8_3_fu_164_p2));
        tmp_8_fu_113_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ENTRADA_V_0_data_out),46));

end behav;
