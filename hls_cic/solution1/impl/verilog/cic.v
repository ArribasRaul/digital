// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="cic,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7a200tfbg676-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.642800,HLS_SYN_LAT=68,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=650,HLS_SYN_LUT=663,HLS_VERSION=2018_2}" *)

module cic (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ENTRADA_V_TDATA,
        ENTRADA_V_TVALID,
        ENTRADA_V_TREADY,
        ap_return
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_state5 = 4'd4;
parameter    ap_ST_fsm_state6 = 4'd8;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] ENTRADA_V_TDATA;
input   ENTRADA_V_TVALID;
output   ENTRADA_V_TREADY;
output  [45:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [15:0] ENTRADA_V_0_data_out;
wire    ENTRADA_V_0_vld_in;
wire    ENTRADA_V_0_vld_out;
wire    ENTRADA_V_0_ack_in;
reg    ENTRADA_V_0_ack_out;
reg   [15:0] ENTRADA_V_0_payload_A;
reg   [15:0] ENTRADA_V_0_payload_B;
reg    ENTRADA_V_0_sel_rd;
reg    ENTRADA_V_0_sel_wr;
wire    ENTRADA_V_0_sel;
wire    ENTRADA_V_0_load_A;
wire    ENTRADA_V_0_load_B;
reg   [1:0] ENTRADA_V_0_state;
wire    ENTRADA_V_0_state_cmp_full;
reg   [45:0] inte_V_0;
reg   [45:0] inte_V_1;
reg   [45:0] inte_V_2;
reg   [45:0] inte_V_3;
reg   [45:0] inte_V_4;
reg   [45:0] deriv_V_0;
reg   [45:0] deriv_V_1;
reg   [45:0] deriv_V_2;
reg   [45:0] deriv_V_3;
reg   [45:0] deriv_V_4;
reg    ENTRADA_V_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond1_reg_270;
reg   [45:0] agg_result_V_reg_74;
reg   [6:0] di_reg_86;
wire   [0:0] exitcond1_fu_97_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] exitcond1_reg_270_pp0_iter1_reg;
wire   [6:0] di_1_fu_103_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [45:0] p_Val2_8_1_fu_133_p2;
reg   [45:0] p_Val2_8_1_reg_279;
wire   [45:0] p_Val2_8_4_fu_180_p2;
reg    ap_enable_reg_pp0_iter2;
wire   [45:0] p_Val2_2_1_fu_218_p2;
reg   [45:0] p_Val2_2_1_reg_289;
wire    ap_CS_fsm_state5;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire   [45:0] p_Val2_5_fu_117_p2;
wire   [45:0] p_Val2_8_2_fu_149_p2;
wire   [45:0] p_Val2_8_3_fu_164_p2;
wire   [45:0] p_Val2_2_fu_202_p2;
wire    ap_CS_fsm_state6;
wire   [45:0] p_Val2_2_2_fu_233_p2;
wire   [45:0] p_Val2_2_3_fu_248_p2;
wire  signed [45:0] tmp_8_fu_113_p1;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ENTRADA_V_0_sel_rd = 1'b0;
#0 ENTRADA_V_0_sel_wr = 1'b0;
#0 ENTRADA_V_0_state = 2'd0;
#0 inte_V_0 = 46'd0;
#0 inte_V_1 = 46'd0;
#0 inte_V_2 = 46'd0;
#0 inte_V_3 = 46'd0;
#0 inte_V_4 = 46'd0;
#0 deriv_V_0 = 46'd0;
#0 deriv_V_1 = 46'd0;
#0 deriv_V_2 = 46'd0;
#0 deriv_V_3 = 46'd0;
#0 deriv_V_4 = 46'd0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ENTRADA_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == ENTRADA_V_0_ack_out) & (1'b1 == ENTRADA_V_0_vld_out))) begin
            ENTRADA_V_0_sel_rd <= ~ENTRADA_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ENTRADA_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == ENTRADA_V_0_ack_in) & (1'b1 == ENTRADA_V_0_vld_in))) begin
            ENTRADA_V_0_sel_wr <= ~ENTRADA_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ENTRADA_V_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == ENTRADA_V_0_state) & (1'b0 == ENTRADA_V_0_vld_in)) | ((2'd3 == ENTRADA_V_0_state) & (1'b0 == ENTRADA_V_0_vld_in) & (1'b1 == ENTRADA_V_0_ack_out)))) begin
            ENTRADA_V_0_state <= 2'd2;
        end else if ((((2'd1 == ENTRADA_V_0_state) & (1'b0 == ENTRADA_V_0_ack_out)) | ((2'd3 == ENTRADA_V_0_state) & (1'b0 == ENTRADA_V_0_ack_out) & (1'b1 == ENTRADA_V_0_vld_in)))) begin
            ENTRADA_V_0_state <= 2'd1;
        end else if (((~((1'b0 == ENTRADA_V_0_vld_in) & (1'b1 == ENTRADA_V_0_ack_out)) & ~((1'b0 == ENTRADA_V_0_ack_out) & (1'b1 == ENTRADA_V_0_vld_in)) & (2'd3 == ENTRADA_V_0_state)) | ((2'd1 == ENTRADA_V_0_state) & (1'b1 == ENTRADA_V_0_ack_out)) | ((2'd2 == ENTRADA_V_0_state) & (1'b1 == ENTRADA_V_0_vld_in)))) begin
            ENTRADA_V_0_state <= 2'd3;
        end else begin
            ENTRADA_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_97_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        di_reg_86 <= di_1_fu_103_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        di_reg_86 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ENTRADA_V_0_load_A)) begin
        ENTRADA_V_0_payload_A <= ENTRADA_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ENTRADA_V_0_load_B)) begin
        ENTRADA_V_0_payload_B <= ENTRADA_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_reg_270_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        agg_result_V_reg_74 <= p_Val2_8_4_fu_180_p2;
        inte_V_2 <= p_Val2_8_2_fu_149_p2;
        inte_V_3 <= p_Val2_8_3_fu_164_p2;
        inte_V_4 <= p_Val2_8_4_fu_180_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        deriv_V_0 <= agg_result_V_reg_74;
        deriv_V_1 <= p_Val2_2_fu_202_p2;
        p_Val2_2_1_reg_289 <= p_Val2_2_1_fu_218_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        deriv_V_2 <= p_Val2_2_1_reg_289;
        deriv_V_3 <= p_Val2_2_2_fu_233_p2;
        deriv_V_4 <= p_Val2_2_3_fu_248_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond1_reg_270 <= exitcond1_fu_97_p2;
        exitcond1_reg_270_pp0_iter1_reg <= exitcond1_reg_270;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_reg_270 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        inte_V_0 <= p_Val2_5_fu_117_p2;
        inte_V_1 <= p_Val2_8_1_fu_133_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_reg_270 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_Val2_8_1_reg_279 <= p_Val2_8_1_fu_133_p2;
    end
end

always @ (*) begin
    if (((exitcond1_reg_270 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ENTRADA_V_0_ack_out = 1'b1;
    end else begin
        ENTRADA_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ENTRADA_V_0_sel)) begin
        ENTRADA_V_0_data_out = ENTRADA_V_0_payload_B;
    end else begin
        ENTRADA_V_0_data_out = ENTRADA_V_0_payload_A;
    end
end

always @ (*) begin
    if (((exitcond1_reg_270 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ENTRADA_V_TDATA_blk_n = ENTRADA_V_0_state[1'd0];
    end else begin
        ENTRADA_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((exitcond1_fu_97_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond1_fu_97_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((exitcond1_fu_97_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ENTRADA_V_0_ack_in = ENTRADA_V_0_state[1'd1];

assign ENTRADA_V_0_load_A = (~ENTRADA_V_0_sel_wr & ENTRADA_V_0_state_cmp_full);

assign ENTRADA_V_0_load_B = (ENTRADA_V_0_state_cmp_full & ENTRADA_V_0_sel_wr);

assign ENTRADA_V_0_sel = ENTRADA_V_0_sel_rd;

assign ENTRADA_V_0_state_cmp_full = ((ENTRADA_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign ENTRADA_V_0_vld_in = ENTRADA_V_TVALID;

assign ENTRADA_V_0_vld_out = ENTRADA_V_0_state[1'd0];

assign ENTRADA_V_TREADY = ENTRADA_V_0_state[1'd1];

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((exitcond1_reg_270 == 1'd0) & (1'b0 == ENTRADA_V_0_vld_out) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((exitcond1_reg_270 == 1'd0) & (1'b0 == ENTRADA_V_0_vld_out) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((exitcond1_reg_270 == 1'd0) & (1'b0 == ENTRADA_V_0_vld_out));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_return = (p_Val2_2_3_fu_248_p2 - deriv_V_4);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign di_1_fu_103_p2 = (di_reg_86 + 7'd1);

assign exitcond1_fu_97_p2 = ((di_reg_86 == 7'd64) ? 1'b1 : 1'b0);

assign p_Val2_2_1_fu_218_p2 = (p_Val2_2_fu_202_p2 - deriv_V_1);

assign p_Val2_2_2_fu_233_p2 = (p_Val2_2_1_reg_289 - deriv_V_2);

assign p_Val2_2_3_fu_248_p2 = (p_Val2_2_2_fu_233_p2 - deriv_V_3);

assign p_Val2_2_fu_202_p2 = (agg_result_V_reg_74 - deriv_V_0);

assign p_Val2_5_fu_117_p2 = ($signed(inte_V_0) + $signed(tmp_8_fu_113_p1));

assign p_Val2_8_1_fu_133_p2 = (inte_V_1 + p_Val2_5_fu_117_p2);

assign p_Val2_8_2_fu_149_p2 = (inte_V_2 + p_Val2_8_1_reg_279);

assign p_Val2_8_3_fu_164_p2 = (inte_V_3 + p_Val2_8_2_fu_149_p2);

assign p_Val2_8_4_fu_180_p2 = (inte_V_4 + p_Val2_8_3_fu_164_p2);

assign tmp_8_fu_113_p1 = $signed(ENTRADA_V_0_data_out);

endmodule //cic
